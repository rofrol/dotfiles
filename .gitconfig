[alias]
	ci = commit
	co = checkout
	br = branch
	# Provide string with spaces. Replace spaces with underscores. Change branch name to this new string.
	# https://stackoverflow.com/questions/1706431/the-easiest-way-to-replace-white-spaces-with-underscores-in-bash/1706449#1706449
	brm = "!f() { name=$(echo $1 | tr '.' ' ' | tr -s ' ' | tr ' ' '_'); git branch -m $name; }; f"
	st = status -sb
	cine = commit -a --amend --no-edit
	sshow = "!f() { git stash show stash^{/$*} -p; }; f"
	sapply = "!f() { git stash apply stash^{/$*}; }; f"
	fap = "!git fetch --all --prune && git fetch -f . origin/master:master"
	f = "!git fetch --all --prune && git fetch -f . origin/master:master"
	rom = rebase origin/master
	puoh = push -u origin HEAD
	newp = "!git fetch -p --all && git checkout -b new origin/preui-dev-acn"
	fpa = fetch -p --all
	bsa = branch --sort=-authordate
	brprune = "!git fetch -p --all && LC_ALL=C git branch -vv | awk '/: gone]/{print $1}' | xargs -r git branch -d"
	brprunef = "!git fetch -p --all && LC_ALL=C git branch -vv | awk '/: gone]/{print $1}' | xargs -r git branch -D"
	# https://stackoverflow.com/questions/1057564/pretty-git-branch-graphs
	lg1 = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all
	lg2 = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n''          %C(white)%s%C(reset) %C(dim white)- %an%C(reset)' --all
	lg3 = log --graph --abbrev-commit --decorate --all
	lg4 = log --graph --abbrev-commit --decorate --all --oneline
	lg5 = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all
	lg6 = log --graph --date-order --date=short --pretty=format:'%C(auto)%h%d %C(reset)%s %C(bold blue)%ce %C(reset)%C(green)%cr (%cd)' --decorate --all
	lg7 = log --graph --date=short --pretty=format:'%C(auto)%h%d %C(reset)%s %C(bold blue)%ce %C(reset)%C(green)%cr (%cd)' --decorate --all
	lg8 = log --graph --date=short --pretty=format:'%C(auto)%h%d %C(reset)%s %C(bold blue)%an %C(reset)%C(green)%ar (%ad)' --decorate --all
	lg9 = log --graph --date-order --date=iso-local --pretty=format:'%C(auto)%h%d %C(reset)%s (A %C(bold blue)%an%C(reset)) %C(reset)(T %C(green)%ar %C(reset)%ad)' --decorate --all
	lg10 = log --graph --date-order --date=iso-local --pretty=format:'%C(auto)%h%d %C(reset)%s (%C(bold blue)%an%C(reset)) %C(reset)(%C(green)%ar %C(reset)%ad)' --decorate --all
	lg11 = log --graph --date-order --date=iso-local --pretty=format:'%C(auto)%h%d %C(reset)%s  %C(bold blue)%an%C(reset)%C(reset)  %C(green)%ar %C(reset)%ad' --decorate --all
	# https://stackoverflow.com/questions/1057564/pretty-git-branch-graphs/22875140#22875140
	lgi = log --graph --decorate --date=iso-local --color --format='%C(auto)%h %d %<|(110,trunc) %s  %<(16,trunc) %an %ad' --all
	lgdi = log --graph --decorate --date=iso-local --color --format='%C(auto)%h %d %<|(110,trunc) %s  %<(16,trunc) %an %ad' --all --date-order
	lgr = log --graph --decorate --date=relative --color --format='%C(auto)%h %d %<|(110,trunc) %s  %<(16,trunc) %an %ad' --all
	lgdr = log --graph --decorate --date=relative --color --format='%C(auto)%h %d %<|(110,trunc) %s  %<(16,trunc) %an %ad' --all --date-order
	lg = !"git lgr"
[core]
	excludesfile = ~/.global_gitignore
	commitGraph = true
	autocrlf = false
#[pager]
#    # cargo install diffr
#    log  = diffr --colors refine-removed:background:200,0,0:foreground:white:bold | less -R
#    show = diffr --colors refine-removed:background:200,0,0:foreground:white:bold | less -R
#    diff = diffr --colors refine-removed:background:200,0,0:foreground:white:bold | less -R
#[interactive]
#    diffFilter = diffr --colors refine-removed:background:200,0,0:foreground:white:bold
[user]
	email = rofrol@gmail.com
	name = Roman FroÅ‚ow
; include for all repositories inside $HOME/projects/
[includeIf "gitdir/i:~/projects/"]
	path = ~/projects/.gitconfig

[includeIf "gitdir/i:~/projects/uscc/"]
	path = ~/projects/uscc/.gitconfig
[pull]
	ff = only
[credential]
	helper = manager-core
